import React from 'react'
import { graphql } from 'gatsby'
import Layout from 'src/components/layout'

import { getWpBlockByName, getWpBlocksByName } from 'src/utils/getWpBlockByName'

import {
	HomePageByIdQuery,
	WpLazyblockHeroBlock,
	WpLazyblockInfocardBlock
} from 'autogenerated/graphql-types'
import News from 'src/components/homepage/news'
import Hero from 'src/components/homepage/hero'
import InfocardList from 'src/components/homepage/infocard'
import LoadableCalendar from 'src/components/homepage/calendar/LoadableCalendar'
import Poll from 'src/components/homepage/poll'

type Props = {
	data: HomePageByIdQuery
}

const HomePage: React.FC<Props> = ({ data }) => {
	const { wpPage: page } = data
	const heroBlock = getWpBlockByName(
		'lazyblock/hero',
		page?.blocks ?? null
	) as WpLazyblockHeroBlock
	const infocardBlocks = getWpBlocksByName(
		'lazyblock/infocard',
		page?.blocks ?? null
	) as WpLazyblockInfocardBlock[]

	return (
		<Layout breadcrumbs={['/', '']}>
			<div className="columns">
				<div className="column">
					<News />
				</div>
				<div className="column is-one-quarter">
					<div className="columns is-multiline">
						<div className="column is-full">
							<LoadableCalendar />
						</div>
						<div className="column is-full">
							<Poll />
						</div>
					</div>
				</div>
			</div>
			<Hero
				text={heroBlock?.attributes?.text ?? ''}
				leftButtonText={heroBlock?.attributes?.leftButtonText ?? ''}
				leftButtonLink={heroBlock?.attributes?.leftButtonLink ?? ''}
				rightButtonText={heroBlock?.attributes?.rightButtonText ?? ''}
				rightButtonLink={heroBlock?.attributes?.rightButtonLink ?? ''}
				img={
					JSON.parse(decodeURI(heroBlock?.attributes?.backgroundImage ?? ''))[
						'url'
					]
				}
			/>
			<br />
			<InfocardList blocks={infocardBlocks} />
		</Layout>
	)
}

export default HomePage

export const pageQuery = graphql`
	query HomePageById($id: String) {
		wpPage(id: { eq: $id }) {
			title
			content
			blocks {
				name
				... on WpLazyblockHeroBlock {
					attributes {
						leftButtonLink
						leftButtonText
						rightButtonLink
						rightButtonText
						text
						backgroundImage
					}
				}
				... on WpLazyblockInfocardBlock {
					dynamicContent
					originalContent
					attributes {
						text
						title
						url
						image
					}
				}
			}
		}
	}
`
